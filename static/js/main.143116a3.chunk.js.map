{"version":3,"sources":["Components/Player/Player.js","Components/Info/Info.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","check_artist","name","document","getElementById","textContent","state","artist","setState","getArtistInfo","className","class","id","alt","onLoad","src","Component","Info","image","info","App","a","fetch","headers","method","body","JSON","stringify","then","response","json","plain","status","scr","createElement","async","appendChild","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TAqCeA,G,8DAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,aAAe,WACX,IAAIC,EAAOC,SAASC,eAAe,uBAAuBC,YACtD,EAAKC,MAAMC,SAAWL,IAC1B,EAAKM,SAAS,CAACD,OAAOL,IACtB,EAAKF,MAAMS,cAAcP,KATzB,EAAKI,MAAQ,CACTC,OAAO,IAHI,E,qDAcT,IAAD,OACT,OACI,yBAAKG,UAAU,kBACX,yBAAKC,MAAM,aACP,yBAAKC,GAAG,YAAaF,UAAU,QAAQG,IAAI,GAAGC,OAAQ,kBAAM,EAAKb,kBACjE,yBAAKS,UAAU,QACX,uBAAGE,GAAG,wBACN,uBAAGA,GAAG,wBAEV,yBAAKA,GAAI,UAAUG,IAAI,YAAYL,UAAU,UAAUG,IAAI,KAC3D,yBAAKD,GAAI,QAAQG,IAAI,WAAWL,UAAU,UAAUG,IAAI,W,GAzBnDG,cCUNC,G,MAVF,SAACjB,GACV,OACI,yBAAKU,UAAU,kBACX,yBAAKA,UAAU,SAAQ,wBAAIE,GAAG,gBAAgBZ,EAAME,OACpD,yBAAKQ,UAAU,gBAAe,yBAAKE,GAAI,SAASG,IAAKf,EAAMkB,MAAOL,IAAI,YACtE,yBAAKH,UAAU,eAAeV,EAAMmB,SCiDjCC,E,kDAlDb,aAAe,IAAD,8BACZ,gBAgBFX,cAjBc,uCAiBE,WAAOP,GAAP,SAAAmB,EAAA,sEACRC,MAAM,gDAAgD,CAC1DC,QAAS,CACP,eAAe,oBAEjBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACpB,OAAOL,MAC5B0B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IACE,EAAKtB,SAAS,CACZW,KAAKW,EAAKL,KAAKM,MACfb,MAAMY,EAAKZ,MACXhB,KAAKA,IAEP,SACA,EAAKM,SAAS,CACZW,KAAK,oCACLD,MAAM,qEACNhB,KAAKA,QAnBC,2CAjBF,sDAEZ,EAAKI,MAAQ,CACX0B,OAAO,KACPb,KAAK,GACLD,MAAM,GACNhB,KAAK,IANK,E,iEAUZ,IAAM+B,EAAM9B,SAAS+B,cAAc,UACnCD,EAAIlB,IAAM,mBACVkB,EAAIE,OAAQ,EACZhC,SAASsB,KAAKW,YAAYH,K,+BA6B5B,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAQD,cAAe4B,KAAK5B,gBAC5B,kBAAC,EAAD,CAAMS,MAAOmB,KAAK/B,MAAMY,MAAOC,KAAMkB,KAAK/B,MAAMa,KAAMjB,KAAMmC,KAAK/B,MAAMJ,Y,GA9C3Dc,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASC,eAAe,SDyHpB,kBAAmB0C,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.143116a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Player.css'\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            artist:\"\"\r\n        };\r\n    }\r\n    \r\n    check_artist = () => {\r\n        let name = document.getElementById('current_artist_name').textContent;\r\n        if (this.state.artist === name) return;\r\n        this.setState({artist:name});\r\n        this.props.getArtistInfo(name);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div className=\"flex-container\"> \r\n            <div class=\"container\">\r\n                <img id=\"album_art\"  className=\"album\" alt=\"\" onLoad={() => this.check_artist()}/>\r\n                <div className=\"text\">\r\n                    <p id=\"current_artist_name\"></p>\r\n                    <p id=\"current_track_name\"></p>\r\n                </div>\r\n                <img id= \"control\" src=\"pause.png\" className=\"playBtn\" alt=\"\"/>\r\n                <img id= \"heart\" src=\"Like.png\" className=\"likeBtn\" alt=\"\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n\r\n}\r\n}\r\nexport default Player;","import React from 'react';\r\nimport './Info.css';\r\n\r\nconst Info = (props) => {\r\n    return (\r\n        <div className=\"info-container\">\r\n            <div className=\"title\"><h2 id=\"artist_title\">{props.name}</h2></div>\r\n            <div className=\"artist-image\"><img id =\"artist\" src={props.image} alt=\"artist\"/></div>\r\n            <div className=\"artist-info\">{props.info}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import React, { Component } from 'react';\nimport './App.css';\nimport Player from './Components/Player/Player';\nimport Info from './Components/Info/Info';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      status:\"no\",\n      info:\"\",\n      image:\"\",\n      name:\"\"\n    }\n  }\n  componentWillMount(){\n    const scr = document.createElement(\"script\");\n    scr.src = \"player_script.js\";\n    scr.async = true;\n    document.body.appendChild(scr);\n  }\n\n\n  getArtistInfo = async (name) => {\n    await fetch('https://damp-inlet-30936.herokuapp.com/artist',{\n      headers: {\n        'Content-Type':'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify({artist:name})\n    }).then(response => response.json())\n      .then(json => {\n        try {\n          this.setState({\n            info:json.body.plain,\n            image:json.image,\n            name:name\n          })\n        } catch {\n          this.setState({\n            info:\"No info available for this artist\",\n            image:\"https://d29fhpw069ctt2.cloudfront.net/icon/image/85269/preview.svg\",\n            name:name\n          });\n        }\n });\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <Player getArtistInfo={this.getArtistInfo}/>\n      <Info image={this.state.image} info={this.state.info} name={this.state.name}/>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}